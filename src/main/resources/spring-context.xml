<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.3.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
	http://www.springframework.org/schema/cache
	http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
	">

	<!-- 只扫描@Service和listener @Repository为mybatis的mapper接口，单独处理，@Controller叫给springMVC扫描 -->
	<context:component-scan base-package="com.cl.smm6.*.serviceimpl,com.cl.smm6.common.listener,test" />

	<!-- 配置通过注释方式注入 -->
	<context:annotation-config />

	<!-- 引入jdbc配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<!--配置数据源 -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" >
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- 配置SqlSessionFactory，同时指定数据源 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:spring-mybatis.xml" />
	</bean>
	<!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.cl.smm6.common.mapper" />
	</bean>

    <!--配置ehcacheManagerFactory bean-->
	<bean id="ehcacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" >
		<property name="configLocation" value="classpath:ehcache.xml" />
	</bean>
    <!--配置ehcacheManager-->
	<bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager" >
		<property name="cacheManager" ref="ehcacheManagerFactory" />
        <property name="transactionAware" value="true" />	<!--设置如果事务回滚，缓存也回滚，默认为false-->
	</bean>
	<!--启用Spring对基于注解的Cache的支持-->
	<!--<cache:annotation-driven cache-manager="ehcacheManager" />-->

    <!--配置缓存key生成策略-->
	<bean id="cacheKeyGenerator" class="com.cl.smm6.common.gengrator.CacheKeyGenerator" />
	<!--配置缓存增强-->
	<cache:advice id="cacheAdvice" cache-manager="ehcacheManager" key-generator="cacheKeyGenerator" >
        <cache:caching cache="myCache1">
			<cache:cacheable method="get*" />
			<cache:cacheable method="load*" />
			<cache:cacheable method="find*" />
			<!--清除缓存过于简单粗暴，待改进，改进为只清除同一个service下的方法，但改进没有成功，只能清除同一service下的第一个出现的key
				就算成功了，也可能造成脏缓存，因为对同一表数据的操作不一定都在该service下-->
			<cache:cache-evict method="add"  />
			<cache:cache-evict method="save*"  />
			<cache:cache-evict method="update*" />
			<cache:cache-evict method="delete*" />
			<cache:cache-evict method="new*" />
			<cache:cache-evict method="insert*" />
		</cache:caching>
	</cache:advice>

	<!-- (事务管理器)transaction manager -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置事务增强,也可以配置为注释方式 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 写 -->
			<tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT" />
			<tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT" />
			<tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT" />
			<tx:method name="new*" propagation="REQUIRED" isolation="DEFAULT" />
			<!-- 读 -->
			<tx:method name="get*" propagation="REQUIRED" isolation="DEFAULT" read-only="true" />
			<tx:method name="load*" propagation="REQUIRED" isolation="DEFAULT" read-only="true" />
			<tx:method name="find*" propagation="REQUIRED" isolation="DEFAULT" read-only="true" />
			<!-- 通配 -->
			<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" />
		</tx:attributes>
	</tx:advice>
	
	<!-- logger日志Bean -->
	<bean id="logger" class="com.cl.smm6.system.controller.Logger" >
		<property name="sysLogService" ref="sysLogServiceImpl"/>
	</bean>

	<!-- aop配置  -->
	<aop:config>
		<!--缓存切入点-->
		<aop:pointcut expression="execution(* *..*Service.*(..)))" id="cachePointCut" />
		<!--事务切入点 -->
		<aop:pointcut expression="execution(* *..*Service.*(..))" id="txPointCut" />
		<!-- 日志切入点 -->
		<aop:pointcut expression="(execution(* *..*Service.save*(..))
								or execution(* *..*Service.update*(..))
								or execution(* *..*Service.delete*(..))
								or execution(* *..*Service.batch*(..))
								or execution(* *..*Service.set*(..))
								or execution(* *..*Service.new*(..))) and !bean(sysLogService)" 
					id="loggerPointcut"/>
		<!--织入缓存切面-->
        <aop:advisor advice-ref="cacheAdvice" pointcut-ref="cachePointCut" />
		<!-- 织入事务切面 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut" />
		<!-- 织入日志切面 -->
		<aop:aspect id="loggerAspect" ref="logger" order="0">
			<aop:around method="record" pointcut-ref="loggerPointcut"/>
		</aop:aspect>
	</aop:config>

</beans>